generateCode(AstNode){
	return false;
}

generateCode(ProgramNode){
	std::ofstream producedCode;
	std::string vDCode = "";
	std::string fPDCode= "";
	producedCode.open("compileable.asm");
	producedCode<<"global main"<<std::endl<<"extern printf"<<std::endl;
	if (!mainNode->generateCode(memHandler)){
		return false;
	}
	if (variableDeclsNode){
		variableDeclsNode->generateCode(memHandler);
		vDCode= variableDeclsNode->code;
	}
	if (functionNProceduresDeclNode){
		functionNProceduresDeclNode->generateCode(memHandler);
		fPDCode= functionNProceduresDeclNode->code;
	}
	producedCode<<memHandler.generateDataCode()
		<<"section .text"<<std::endl
		<<"main:"<<std::endl
		<<mainNode->code<<std::endl;
	producedCode.close();
	return true;
}

generateCode(BlockNode){
	std::ostringstream ss;
	if (!n->generateCode(memHandler)){
		return false;
	}
	
	ss<<n->code<<"ret";
	code= ss.str();
	return true;
}

generateCode(ListNode){
	std::ostringstream ss;
	for (auto &child : child_list){
		if (child){
			if (!child->generateCode(memHandler)){
				return false;
			}
			ss<<child->code<<std::endl;
		}
	}
	code= ss.str();
	return true;
}

generateCode(PrintStatementNode){
	std::ostringstream ss;
	if (!n->generateCode(memHandler)){
		return false;
	}
	auto list = static_cast<ExprListNode*>(n);
	int printAmount= 0;
	for (auto child : list->child_list ){
		if (child){
			if (!child->generateCode(memHandler)){
				return false;
			}
			ss<<child->code<<std::endl;
			printAmount++;
		}
	}
	ss<<n->code;
	code= ss.str();
	return true;
}

generateCode(ExprListNode){
	return true;
}

generateCode(StrLitNode){
	place= memHandler.allocateString(value);
	type= type_code::string_lit_type;
	return true;
}