generateCode(AstNode){
	return false;
}

generateCode(ProgramNode){
	std::ofstream producedCode;
	std::string vDCode = "";
	std::string fPDCode= "";
	producedCode.open("compileable.asm");
	producedCode<<"global main"<<std::endl<<"extern printf"<<std::endl;
	if (!mainNode->generateCode(memHandler)){
		return false;
	}
	if (variableDeclsNode){
		variableDeclsNode->generateCode(memHandler);
		vDCode= variableDeclsNode->code;
	}
	if (functionNProceduresDeclNode){
		functionNProceduresDeclNode->generateCode(memHandler);
		fPDCode= functionNProceduresDeclNode->code;
	}
	producedCode<<memHandler.generateDataCode()
		<<"section .text"<<std::endl
		<<"main:"<<std::endl
		<<mainNode->code<<std::endl;
	producedCode.close();
	return true;
}

generateCode(BlockNode){
	std::ostringstream ss;
	if (!n->generateCode(memHandler)){
		return false;
	}
	ss<<n->code<<"ret";
	code= ss.str();
	return true;
}

generateCode(ListNode){
	return false;
}

generateCode(StatementListNode){
	std::ostringstream ss;
	for (auto child : myNodes){
		if (child){
			if (!child->generateCode(memHandler)){
				return false;
			}
			ss<<child->code;
		}
	}
	if (next){
		if (!next->generateCode(memHandler)){
			return false;
		}
		ss<<next->code;
	}
	code=ss.str();
	return true;
}

generateCode(PrintStatementNode){
	std::ostringstream ss;
	int printAmount= 0;
	std::string formats= "";
	std::stack<std::string> places;
	auto list = static_cast<ExprListNode*>(n);
	while (list){
		if (!list->generateCode(memHandler)){
			return false;
		}
		ss<<list->code;
		++printAmount;
		for (auto child : list->myNodes){
			places.push(child->place);
			if (child->type == type_code::string_lit_type){
				formats+= "%s";
			} else if (child->type == type_code::bool_type){
				formats+= "%d";
			} else if (child->type == type_code::int_type){
				formats+= "%d";
			} else if (child->type == type_code::char_type){
				formats+= "%c";
			} else if (child->type == type_code::error_type) {
				std::cout<<"Expr in print without type or with error type: "<<std::endl;
				return false;
			}
		}
		list=static_cast<ExprListNode*>(list->next);
	}
	auto printingStrPlace= memHandler.allocateString(formats);
	ss<<n->code;
	while (!places.empty()) {
		ss<<"push "<<places.top()<<std::endl;
		places.pop();
	}
	++printAmount;
	ss<<"push "<<printingStrPlace<<std::endl
		<<"call printf"<<std::endl
		<<"add esp, "<< printAmount*4<<std::endl;
	code= ss.str();
	return true;
}

generateCode(ExprListNode){
	std::ostringstream ss;
	for (auto& child : myNodes){
		if (!child->generateCode(memHandler)){
			return false;
		}
		ss<<child->code;
	}
	code= ss.str();
	return true;
}

generateCode(StrLitNode){
	place= memHandler.allocateString(value);
	type= type_code::string_lit_type;
	return true;
}