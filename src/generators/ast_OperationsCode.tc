generateCode(AdditionNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"add eax, dword["<<right->place<<"]"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(SubtractionNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"sub eax, dword["<<right->place<<"]"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(MultiplicationNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"imul eax, dword["<<right->place<<"]"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(DivisionNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"mov ebx, dword["<<right->place<<"]"<<std::endl
		<<"cdq"<<std::endl
		<<"idiv ebx"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(ModulusNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"mov ebx, dword["<<right->place<<"]"<<std::endl
		<<"cdq"<<std::endl
		<<"idiv ebx"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", edx"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(OrNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"or eax, dword["<<right->place<<"]"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(AndNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
		place= memHandler.allocateInt(0, "$temp");
	ss
		<<left->code
		<<right->code
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"and eax, dword["<<right->place<<"]"<<std::endl
		<<"mov dword["<<node->place<<"]"<<", eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(ExponentNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
		place= memHandler.allocateInt(0, "$temp");
		std::string zeroPwrLbl= memHandler.getNewLabel();
		std::string whileLbl= memHandler.getNewLabel();
		std::string finishedLoopLbl= memHandler.getNewLabel();
		std::string exitExponentLbl= memHandler.getNewLabel();
	ss
		<<left->code
		<<right->code
		<<"cmp dword["<<right->place<<"], 0"<<std::endl
		<<"jz "<<zeroPwrLbl<<std::endl
		<<"mov eax, dword["<<left->place<<"]"<<std::endl
		<<"mov ecx, dword["<<right->place<<"]"<<std::endl
		<<whileLbl<<":"<<std::endl
		<<"cmp ecx, 1"<<std::endl
		<<"je "<<finishedLoopLbl<<std::endl
		<<"imul eax, dword["<<left->place<<"]"<<std::endl
		<<"dec ecx"<<std::endl
		<<"jmp "<<whileLbl<<std::endl
		<<finishedLoopLbl<<":"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl
		<<"jmp "<<exitExponentLbl<<std::endl
		<<zeroPwrLbl<<":"<<std::endl
		<<"mov dword["<<node->place<<"], 1"<<std::endl
		<<"jmp "<<exitExponentLbl<<std::endl
		<<exitExponentLbl<<":"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(LessThanNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<"xor eax, eax"<<std::endl
		<<"mov ebx, dword["<<left->place<<"]"<<std::endl
		<<"cmp ebx, dword["<<right->place<<"]"<<std::endl
		<<"setl al"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(GrtrThanNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<"xor eax, eax"<<std::endl
		<<"mov ebx, dword["<<left->place<<"]"<<std::endl
		<<"cmp ebx, dword["<<right->place<<"]"<<std::endl
		<<"setg al"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(GrtrThanEtNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<"xor eax, eax"<<std::endl
		<<"mov ebx, dword["<<left->place<<"]"<<std::endl
		<<"cmp ebx, dword["<<right->place<<"]"<<std::endl
		<<"setge al"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(LessThanEtNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<"xor eax, eax"<<std::endl
		<<"mov ebx, dword["<<left->place<<"]"<<std::endl
		<<"cmp ebx, dword["<<right->place<<"]"<<std::endl
		<<"setle al"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl;
	code= ss.str();
	return true;
}

generateCode(EqualsNode){
	std::ostringstream ss;
	if (!left->generateCode(memHandler)){
		return false;
	}
	if (!right->generateCode(memHandler)){
		return false;
	}
	if (left->type == right->type){
		type= left->type;
	} else {
		std::cout<<"Error_type/inconsistent types detected in addition node"<<std::endl;
		return false;
	}
	place= memHandler.allocateInt(0, "$temp");
	ss
		<<"xor eax, eax"<<std::endl
		<<"mov ebx, dword["<<left->place<<"]"<<std::endl
		<<"cmp ebx, dword["<<right->place<<"]"<<std::endl
		<<"sete al"<<std::endl
		<<"mov dword["<<node->place<<"], eax"<<std::endl;
	code= ss.str();
	return true;
}