%option lang= "C++"
%option track_lines
%decls %{
	#include <deque>
	#include <iostream>
	#include <unordered_map>
	#include <tuple>
	#include <stack>
	#include <fstream>
	#include "parser.hpp"
	#include "lexer.hpp"
	#include "common.hpp"
	#include "memoryHandler.hpp"

	enum class type_code{
		error_type,
		char_type,
		bool_type,
		int_type,
		id_type,
		func_type,
		array_type,
		string_lit_type
	};

	class AstNode;
	using namespace std;
	using AstNodeList = deque<AstNode*>;
	//Symbols in functions are only their names followed by their type
	using FunctionSymbols= std::unordered_map<std::string, type_code, CaseIHash, CaseIPredicate>;
	//SymbolTypes are the type of that symbol and optionally an array to an extra set of symbols
	using SymbolType = std::tuple<type_code,int,FunctionSymbols>;
	//SymbolList contains a name followed by a SymbolType
	using SymbolList = std::unordered_map<std::string, SymbolType, CaseIHash, CaseIPredicate>;
	bool semanticsError(std::string errMsg, AstNode *node);
	extern SymbolList SymbolTable;
	extern SymbolType& CurrentContext;
	extern type_code temp;

%}

%{
	#include "ast.hpp"
	SymbolList SymbolTable= {};
	FunctionSymbols* currentContext= nullptr;
	type_code temp= type_code::error_type;
	bool semanticsError(std::string errMsg, AstNode *node){
		std::cerr<<"Semantics ERROR@:"<<node->getLinenum()<<std::endl<<errMsg<<std::endl;
		return false;
	}
%}

%include "ast_nodes.tc"

%operation %virtual string		toString(AstNode* node)
%operation %virtual string		getOperatorString(OperationNode* node)
%operation %virtual string		getDelimiter(ListNode* node)
%operation %virtual bool		doSemantics(AstNode *node)
%operation %virtual bool		generateCode(AstNode *node, MemoryHandler& memHandler)

%include "ast_dosemantics.tc"
%include "ast_tostring.tc"
%include "operations_getoper.tc"
%include "ast_generateCode.tc"


getDelimiter(ListNode){
	return ",";
}

getDelimiter(VariableDeclListNode){
	return "\n";
}

getDelimiter(FuncsListNode){
	return "\n";
}

getDelimiter(StatementListNode){
	return "\n";
}
