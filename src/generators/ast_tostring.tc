
toString(NumberNode){
	return std::to_string(value);
}

toString(CharacterNode){
	return std::string(value, 1);
}

toString(BooleanNode){
	return value ? "verdadero" : "falso";
}

toString(IdNode){
	return value;
}

toString(ProgramNode){
	std::string result= "";
	if (variableDeclsNode)
		result+= variableDeclsNode->toString();
	if (functionNProceduresDeclNode)
		result+= functionNProceduresDeclNode->toString();
	result+= mainNode->toString();
	return result;
}

toString(IntDeclNode){
	return "entero";
}

toString(CharDeclNode){
	return "caracter";
}

toString(BooleanDeclNode){
	return "booleano";
}

toString(StrLitNode){
	return value;
}

toString(OperationNode){
	string result= "";
	if (left){
		result+= left->toString();
	}
	if (right){
		result+= node->getOperatorString() + right->toString();
	}
	return result+"\n";
}

toString(TypedefArrayNode){
	string result= "Tipo ";
	result+= idNode->toString() + " es arreglo [";
	result+= NumberListNode->toString() + "] de ";
	result+= primitiveTypeNode->toString();
	return result;
}

toString(BlockNode){
	string result= "inicio\n";
	if (n)
		result+= n->toString();
	return result + "\nfin\n";
}

toString(ElseStatementNode){
	return n->toString();
}

toString(ReturnNode){
	string result= "retorne ";
	result+= n->toString();
	return result;
}

toString(ProcedureNode){
	string result= "procedimiento ";
	result+= idNode->toString();
	if (optionalArgsNode)
		result+= "(" + optionalArgsNode->toString() + ")";
	result+= "\n";
	if (variableDeclsNode)
		result+= variableDeclsNode->toString();
	result+= blockNode->toString();
	return result;
}

toString(FunctionNode){
	string result= "funcion ";
	result+= idNode->toString(); 
	if (optionalArgsNode)
		result+= "(" + optionalArgsNode->toString() + "):";
	result+= returnTypeNode->toString() + "\n";
	if (variableDeclsNode)
		result+= variableDeclsNode->toString();
	result+= blockNode->toString();
	return result;
}

toString(IfStatementNode){
	string result= "si ";
	result+= expressionNode->toString() + "\n";
	if (statementListNode)
		result+= statementListNode->toString();
	if (elseNode)
		result+= elseNode->toString();
	return result + "\nfinsi\n";
}

toString(ForStatementNode){
	string result= "Para \n";
	result+= beginNode->toString() + " hasta ";
	result+= endConditionNode->toString();
	result+= " haga \n";
	result+= statementListNode->toString();
	return result;
}

toString(FuncCallNode){
	string result= "Llamar ";
	result+= left->toString();
	if (right)
		result+= right->toString();
	return result;
}

toString(ArrayAccessNode){
	string result= "";
	result+= left->toString() + "[";
	result+= right->toString() + "]";
	return result;
}

toString(FunctionUseNode){
	string result= "";
	result+= left->toString();
	result+= "(" + right->toString() + ")";
	return result;
}

toString(AssignmentNode){
	string result= "";
	result+= left->toString() + "<-";
	result+= right->toString();
	return result;
}

toString(TypedefNode){
	string result= "tipo ";
	result+= left->toString() + " es ";
	result+= right->toString();
	return result;
}

toString(PrintStatementNode){
	string result= "escriba ";
	result += n->toString();
	return result;
}

toString(VariableDeclListNode){
	string result= "";
	return result;
}

toString(IdListNode){
	string result= "";
	return result;
}

toString(NumListNode){
	string result= "";
	return result;
}

toString(FuncsListNode){
	string result= "";
	return result;
}

toString(StatementListNode){
	string result= "";
	return result;
}

toString(ArgListNode){
	string result= "";
	return result;
}

toString(ExprListNode){
	string result= "";
	return result;
}

toString(WhileStatementNode){
	string result= "mientras ";
	result+= left->toString() + " haga";
	result+= right->toString() + "\n";
	result+= "fin mientras";
	return result;
}

toString(DoWhileUntilStatementNode){
	string result= "repita \n";
	result+= left->toString();
	result+= "hasta " + right->toString() + "\n";
	return result;
}